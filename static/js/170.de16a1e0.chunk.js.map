{"version":3,"file":"static/js/170.de16a1e0.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MyContacts/MyContactsForm/MyContactsForm.module.css?2e14","components/MyContacts/MyContactsForm/MyContactsForm.jsx","webpack://react-homework-template/./src/components/MyContacts/MyContactsList/MyContactsList.module.css?6b3f","components/MyContacts/MyContactsList/MyContactsList.jsx","webpack://react-homework-template/./src/components/MyContacts/MyContactsFind/MyContactsFind.module.css?a2d9","components/MyContacts/MyContactsFind/MyContactsFind.jsx","redux/contacts/contacts-selectors.js","redux/filter/filter-selectors.js","webpack://react-homework-template/./src/components/MyContacts/MyContacts.module.css?73b2","components/MyContacts/MyContacts.jsx","pages/MyContactsPage/MyContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formGroup\":\"MyContactsForm_formGroup__euvIf\",\"btn\":\"MyContactsForm_btn__sdYIk\",\"input\":\"MyContactsForm_input__K7hcM\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport css from './MyContactsForm.module.css';\n\nconst MyContactsForm = ({ onSubmit }) => {\n  const [state, setState] = useState({\n    name: '',\n    number: '',\n  });\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setState(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  };\n\n  const { name, number } = state;\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ name, number });\n    setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className={css.formGroup}>\n        <label>Name</label>\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          placeholder=\"Enter a name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n\n        <label>Number</label>\n        <input\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          placeholder=\"Enter a phone number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n\n        <button className={css.btn} type=\"submit\">\n          Add contact\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default MyContactsForm;\n\nMyContactsForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MyContactsList_list__DwB1t\",\"item\":\"MyContactsList_item__vLaVj\",\"btn\":\"MyContactsList_btn__GvciH\"};","import PropTypes from 'prop-types';\n\nimport css from './MyContactsList.module.css';\n\nconst MyContactList = ({ removeContact, contacts }) => {\n  const items = contacts.map(({ id, name, number }) => (\n    <li className={css.item} key={id}>\n      {name}: {number}\n      <button\n        className={css.btn}\n        onClick={() => removeContact(id)}\n        type=\"button\"\n      >\n        Delete\n      </button>\n    </li>\n  ));\n\n  return <ol className={css.list}>{items}</ol>;\n};\n\nexport default MyContactList;\n\nMyContactList.defaultProps = {\n  contacts: [],\n};\n\nMyContactList.propTypes = {\n  removeContact: PropTypes.func,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"MyContactsFind_input__wU+gx\",\"formGroup\":\"MyContactsFind_formGroup__6yhd2\"};","import PropTypes from 'prop-types';\n\nimport css from './MyContactsFind.module.css';\n\nconst MyContactsFind = ({ handleChange, value }) => {\n  return (\n    <div className={css.formGroup}>\n      <label>Find contact by name</label>\n      <input\n        className={css.input}\n        name=\"filter\"\n        value={value}\n        onChange={handleChange}\n        placeholder=\"Enter a name\"\n      />\n    </div>\n  );\n};\n\nexport default MyContactsFind;\n\nMyContactsFind.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n};\n","export const getFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts.items;\n  }\n\n  const normalizedFilter = filter.toLowerCase();\n  const result = contacts.items.filter(({ name }) => {\n    return name.toLowerCase().includes(normalizedFilter);\n  });\n\n  return result;\n};\n","export const getFilter = ({ filter }) => filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"MyContacts_wrapper__IoaG7\",\"block\":\"MyContacts_block__jVef6\",\"title\":\"MyContacts_title__nDQDO\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport MyContactsForm from './MyContactsForm/MyContactsForm';\nimport MyContactList from './MyContactsList/MyContactsList';\nimport MyContactsFind from './MyContactsFind/MyContactsFind';\n\nimport {\n  fetchAllContacts,\n  fetchAddContact,\n  fetchDeleteContact,\n} from '../../redux/contacts/contacts-operations';\n\nimport { setFilter } from 'redux/filter/filter-slice';\nimport { getFilteredContacts } from 'redux/contacts/contacts-selectors';\n\nimport { getFilter } from 'redux/filter/filter-selectors';\n\nimport css from './MyContacts.module.css';\n\nconst MyContacts = () => {\n  const filteredContacts = useSelector(getFilteredContacts);\n  const filter = useSelector(getFilter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  const onAddContact = ({ name, number }) => {\n    dispatch(fetchAddContact({ name, number }));\n  };\n\n  const onDeleteContact = id => {\n    dispatch(fetchDeleteContact(id));\n  };\n\n  const handleFilter = ({ target }) => dispatch(setFilter(target.value));\n\n  const isContacts = Boolean(filteredContacts.length);\n\n  return (\n    <div className={css.wrapper}>\n      <div className={css.block}>\n        <h3 className={css.title}>Phonebook</h3>\n        <MyContactsForm onSubmit={onAddContact} />\n      </div>\n\n      <div className={css.block}>\n        <h3 className={css.title}>Contacts</h3>\n        <MyContactsFind value={filter} handleChange={handleFilter} />\n        {isContacts && (\n          <MyContactList\n            removeContact={onDeleteContact}\n            contacts={filteredContacts}\n          />\n        )}\n        {!isContacts && <p>No contacts in the list</p>}\n        <MyContactList />\n      </div>\n    </div>\n  );\n};\n\nexport default MyContacts;\n","import MyContacts from 'components/MyContacts/MyContacts';\n\n//import css from './MyContactsPage.module.css';\n\nconst MyContactsPage = () => {\n  return <MyContacts />;\n};\n\nexport default MyContactsPage;\n"],"names":["onSubmit","useState","name","number","state","setState","handleChange","target","value","prevState","e","preventDefault","className","css","type","onChange","placeholder","pattern","title","required","MyContactList","removeContact","items","contacts","map","id","onClick","defaultProps","getFilteredContacts","filter","normalizedFilter","toLowerCase","includes","getFilter","filteredContacts","useSelector","dispatch","useDispatch","useEffect","fetchAllContacts","isContacts","Boolean","length","fetchAddContact","setFilter","fetchDeleteContact"],"sourceRoot":""}